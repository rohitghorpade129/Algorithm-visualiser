{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\Acer\\\\Desktop\\\\New folder\\\\Algorithm-Visualizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";export function bfsdfs(grid,startNode,endNode,algo){var list=[];var nodesInOrder=[];nodesInOrder.push(startNode);list.push(startNode);startNode.isVisited=true;while(!!list.length){var currentNode=algo===\"bfs\"?list.shift():list.pop();nodesInOrder.push(currentNode);if(currentNode===endNode)return nodesInOrder;if(algo===\"dfs\")currentNode.isVisited=true;var nodesToPush=getNeighbours(grid,currentNode);var _iterator=_createForOfIteratorHelper(nodesToPush),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var node=_step.value;if(algo===\"bfs\"){node.isVisited=true;}node.previousNode=currentNode;list.push(node);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}return nodesInOrder;}function getNeighbours(grid,node){var neighbors=[];var col=node.col,row=node.row;// console.log(node);\nif(col>0)neighbors.push(grid[row][col-1]);if(row>0)neighbors.push(grid[row-1][col]);if(row<grid.length-1)neighbors.push(grid[row+1][col]);if(col<grid[0].length-1)neighbors.push(grid[row][col+1]);return neighbors.filter(function(neighbor){return!neighbor.isVisited&&!neighbor.isWall;});}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/algorithms/bfs.jsx"],"names":["bfsdfs","grid","startNode","endNode","algo","list","nodesInOrder","push","isVisited","length","currentNode","shift","pop","nodesToPush","getNeighbours","node","previousNode","neighbors","col","row","filter","neighbor","isWall"],"mappings":"oNAAA,MAAO,SAASA,CAAAA,MAAT,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+BC,OAA/B,CAAuCC,IAAvC,CAA4C,CAC/C,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CACAA,YAAY,CAACC,IAAb,CAAkBL,SAAlB,EACAG,IAAI,CAACE,IAAL,CAAUL,SAAV,EACAA,SAAS,CAACM,SAAV,CAAsB,IAAtB,CACA,MAAM,CAAC,CAACH,IAAI,CAACI,MAAb,CAAoB,CAChB,GAAMC,CAAAA,WAAW,CAAIN,IAAI,GAAK,KAAT,CAAiBC,IAAI,CAACM,KAAL,EAAjB,CAA8BN,IAAI,CAACO,GAAL,EAAnD,CACAN,YAAY,CAACC,IAAb,CAAkBG,WAAlB,EACA,GAAIA,WAAW,GAAKP,OAApB,CAA8B,MAAOG,CAAAA,YAAP,CAC9B,GAAIF,IAAI,GAAK,KAAb,CAAqBM,WAAW,CAACF,SAAZ,CAAwB,IAAxB,CACrB,GAAMK,CAAAA,WAAW,CAAGC,aAAa,CAACb,IAAD,CAAMS,WAAN,CAAjC,CALgB,yCAMGG,WANH,YAMhB,+CAAgC,IAArBE,CAAAA,IAAqB,aAC5B,GAAGX,IAAI,GAAK,KAAZ,CAAkB,CACdW,IAAI,CAACP,SAAL,CAAiB,IAAjB,CACH,CACDO,IAAI,CAACC,YAAL,CAAoBN,WAApB,CACAL,IAAI,CAACE,IAAL,CAAUQ,IAAV,EAEH,CAbe,qDAcnB,CACD,MAAOT,CAAAA,YAAP,CACH,CAED,QAASQ,CAAAA,aAAT,CAAuBb,IAAvB,CAA4Bc,IAA5B,CAAiC,CAC7B,GAAME,CAAAA,SAAS,CAAG,EAAlB,CACA,GAAOC,CAAAA,GAAP,CAAmBH,IAAnB,CAAOG,GAAP,CAAYC,GAAZ,CAAmBJ,IAAnB,CAAYI,GAAZ,CACD;AAEC,GAAID,GAAG,CAAG,CAAV,CAAaD,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAf,EACb,GAAIC,GAAG,CAAG,CAAV,CAAaF,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EACb,GAAIC,GAAG,CAAGlB,IAAI,CAACQ,MAAL,CAAc,CAAxB,CAA2BQ,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf,EAC3B,GAAIA,GAAG,CAAGjB,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,CAAiB,CAA3B,CAA8BQ,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAf,EAC9B,MAAOD,CAAAA,SAAS,CAACG,MAAV,CAAiB,SAAAC,QAAQ,QAAK,CAACA,QAAQ,CAACb,SAAV,EAAuB,CAACa,QAAQ,CAACC,MAAtC,EAAzB,CAAP,CACH","sourcesContent":["export function bfsdfs(grid,startNode,endNode,algo){\r\n    var list = [];\r\n    const nodesInOrder = [];\r\n    nodesInOrder.push(startNode);\r\n    list.push(startNode);\r\n    startNode.isVisited = true;\r\n    while(!!list.length){\r\n        const currentNode = (algo === \"bfs\" ? list.shift():list.pop());\r\n        nodesInOrder.push(currentNode);\r\n        if( currentNode === endNode ) return nodesInOrder;\r\n        if( algo === \"dfs\" ) currentNode.isVisited = true;\r\n        const nodesToPush = getNeighbours(grid,currentNode);\r\n        for( const node of nodesToPush ){\r\n            if(algo === \"bfs\"){\r\n                node.isVisited = true;\r\n            }\r\n            node.previousNode = currentNode;\r\n            list.push(node);\r\n\r\n        }\r\n    }\r\n    return nodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(grid,node){\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n   // console.log(node);\r\n\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => (!neighbor.isVisited && !neighbor.isWall ));\r\n}"]},"metadata":{},"sourceType":"module"}