{"ast":null,"code":"export function bubbleSort2(rects) {\n  const pairs = [];\n  const num = rects.length;\n  const prevRect = rects.slice();\n\n  for (let i = 0; i < num; i++) {\n    for (let j = i + 1; j < num; j++) {\n      if (prevRect[i].width > prevRect[j].width) {\n        const recti = { ...prevRect[i]\n        };\n        const rectj = { ...prevRect[j]\n        };\n        prevRect[j] = recti;\n        prevRect[i] = rectj;\n        pairs.push({\n          xx: i,\n          yy: j,\n          changed: true\n        });\n      } else {\n        pairs.push({\n          xx: i,\n          yy: j,\n          changed: false\n        });\n      }\n\n      if (j === num - 1) {\n        pairs.push({\n          xx: i,\n          yy: i,\n          changed: false\n        });\n      }\n    }\n  }\n\n  return pairs;\n}\nexport function selectionSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice(); // One by one move boundary of unsorted subarray\n\n  for (let i = 0; i < n - 1; i++) {\n    let min_idx = i;\n\n    for (let j = i + 1; j < n; j++) {\n      pairs.push({\n        xx: min_idx,\n        yy: j,\n        changed: false\n      });\n\n      if (prevRect[j].width < prevRect[min_idx].width) {\n        min_idx = j;\n      }\n    } // Swap the found minimum element with the first\n    // element\n\n\n    const recti = { ...prevRect[i]\n    };\n    const rectj = { ...prevRect[min_idx]\n    };\n    prevRect[min_idx] = recti;\n    prevRect[i] = rectj;\n    pairs.push({\n      xx: min_idx,\n      yy: i,\n      changed: true\n    });\n    pairs.push({\n      xx: i,\n      yy: i,\n      changed: false\n    });\n  }\n\n  pairs.push({\n    xx: n - 1,\n    yy: n - 1,\n    changed: false\n  });\n  return pairs;\n}\nexport function bubbleSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice();\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (prevRect[j].width > prevRect[j + 1].width) {\n        // swap arr[j+1] and arr[j]\n        const recti = { ...prevRect[j]\n        };\n        const rectj = { ...prevRect[j + 1]\n        };\n        prevRect[j + 1] = recti;\n        prevRect[j] = rectj;\n        pairs.push({\n          xx: j,\n          yy: j + 1,\n          changed: true\n        });\n      } else {\n        pairs.push({\n          xx: j,\n          yy: j + 1,\n          changed: false\n        });\n      }\n\n      if (j === n - i - 2) {\n        pairs.push({\n          xx: n - i - 1,\n          yy: n - i - 1,\n          changed: false\n        });\n      }\n    }\n  }\n\n  pairs.push({\n    xx: 0,\n    yy: 0,\n    changed: false\n  });\n  return pairs;\n}\nexport function insertionSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice();\n\n  for (let i = 1; i < n; ++i) {\n    let key = prevRect[i].width;\n    let j = i - 1;\n\n    while (j >= 0 && prevRect[j].width > key) {\n      const recti = { ...prevRect[j]\n      };\n      const rectj = { ...prevRect[j + 1]\n      };\n      prevRect[j + 1] = recti;\n      prevRect[j] = rectj;\n      pairs.push({\n        xx: j,\n        yy: j + 1,\n        changed: true\n      });\n      j = j - 1;\n    } // arr[j + 1] = arr[i];\n\n  }\n\n  for (let i = 0; i < n; i++) {\n    pairs.push({\n      xx: i,\n      yy: i,\n      changed: true\n    });\n  }\n\n  return pairs;\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/AlgorithmVisualizer/src/algorithms/sortingAlgorithms.js"],"names":["bubbleSort2","rects","pairs","num","length","prevRect","slice","i","j","width","recti","rectj","push","xx","yy","changed","selectionSort","arr","n","min_idx","bubbleSort","insertionSort","key"],"mappings":"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","sourcesContent":["export function bubbleSort2(rects ){\r\n    const pairs = [];\r\n    const num  = rects.length;\r\n    const prevRect = rects.slice();\r\n\r\n    for( let i = 0; i<num; i++ ){\r\n        for( let j = i+1;j<num;j++ ){\r\n            if( prevRect[i].width>prevRect[j].width ){\r\n                const recti = {...prevRect[i]};\r\n                const rectj = {...prevRect[j]};\r\n                prevRect[j] = recti;\r\n                prevRect[i] = rectj;\r\n                pairs.push( {\r\n                    xx:i,\r\n                    yy:j,\r\n                    changed:true\r\n                } );\r\n            } else{\r\n                pairs.push( {\r\n                    xx:i,\r\n                    yy:j,\r\n                    changed:false\r\n                });\r\n            }\r\n            if( j === num-1 ){\r\n                pairs.push( {\r\n                    xx:i,\r\n                    yy:i,\r\n                    changed:false\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return pairs;\r\n}\r\n\r\nexport function selectionSort(arr) {\r\n    const pairs = [];\r\n    let n = arr.length;\r\n    const prevRect = arr.slice();\r\n    // One by one move boundary of unsorted subarray\r\n    for (let i = 0; i < n-1; i++)\r\n    {\r\n        let min_idx = i;\r\n        for (let j = i+1; j < n; j++){\r\n            pairs.push( {\r\n                xx:min_idx,\r\n                yy:j,\r\n                changed:false\r\n            } );\r\n            if (prevRect[j].width < prevRect[min_idx].width){\r\n                min_idx = j;\r\n            }\r\n        }\r\n\r\n        // Swap the found minimum element with the first\r\n        // element\r\n        const recti = {...prevRect[i]};\r\n        const rectj = {...prevRect[min_idx]};\r\n        prevRect[min_idx] = recti;\r\n        prevRect[i] = rectj;\r\n        pairs.push( {\r\n            xx:min_idx,\r\n            yy:i,\r\n            changed:true\r\n        } );\r\n        pairs.push( {\r\n            xx:i,\r\n            yy:i,\r\n            changed:false\r\n        });\r\n    }\r\n    pairs.push({\r\n            xx:n-1,\r\n            yy:n-1,\r\n            changed:false\r\n        }\r\n    )\r\n    return pairs;\r\n}\r\n\r\nexport function bubbleSort(arr){\r\n    const pairs= [];\r\n    let n = arr.length;\r\n    const prevRect = arr.slice();\r\n    for (let i = 0; i < n-1; i++){\r\n        for (let j = 0; j < n-i-1; j++){\r\n            if (prevRect[j].width > prevRect[j+1].width) {\r\n                // swap arr[j+1] and arr[j]\r\n                const recti = {...prevRect[j]};\r\n                const rectj = {...prevRect[j+1]};\r\n                prevRect[j+1] = recti;\r\n                prevRect[j] = rectj;\r\n                pairs.push( {\r\n                    xx:j,\r\n                    yy:j+1,\r\n                    changed:true\r\n                } );\r\n            } else{\r\n                pairs.push( {\r\n                    xx:j,\r\n                    yy:j+1,\r\n                    changed:false\r\n                } );\r\n            }\r\n            if( j === n-i-2 ){\r\n                pairs.push( {\r\n                    xx:n-i-1,\r\n                    yy:n-i-1,\r\n                    changed:false\r\n                } );\r\n            }\r\n        }\r\n    }\r\n    pairs.push({\r\n            xx:0,\r\n            yy:0,\r\n            changed:false\r\n        }\r\n    )\r\n    return pairs;\r\n}\r\n\r\nexport function insertionSort(arr){\r\n    const pairs = [];\r\n    let n = arr.length;\r\n    const prevRect = arr.slice();\r\n    for (let i = 1; i < n; ++i) {\r\n        let key = prevRect[i].width;\r\n        let j = i - 1;\r\n\r\n        while (j >= 0 && prevRect[j].width > key) {\r\n            const recti = {...prevRect[j]};\r\n            const rectj = {...prevRect[j+1]};\r\n            prevRect[j+1] = recti;\r\n            prevRect[j] = rectj;\r\n            pairs.push( {\r\n                xx:j,\r\n                yy:j+1,\r\n                changed:true\r\n            } );\r\n            j = j - 1;\r\n        }\r\n       // arr[j + 1] = arr[i];\r\n    }\r\n    for(let i=0;i<n;i++){\r\n        pairs.push({\r\n            xx:i,\r\n            yy:i,\r\n            changed:true\r\n        })\r\n    }\r\n    return pairs;\r\n}"]},"metadata":{},"sourceType":"module"}