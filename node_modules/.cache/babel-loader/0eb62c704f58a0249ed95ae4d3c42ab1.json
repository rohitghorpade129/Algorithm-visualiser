{"ast":null,"code":"let values = [];\nexport function quickSortRecursive(rects2) {\n  let rects = rects2.slice();\n  values = [];\n  let sz = rects2.length; // console.log( \"fdsfsd\",sz );\n\n  sz = sz - 1;\n  quick(rects, 0, sz);\n  return values;\n}\n\nfunction getPartition(rects, left, right) {\n  values.push({\n    left,\n    right,\n    swap: false,\n    changedRange: true\n  });\n  let pivot = rects[right].width;\n  let it = left - 1;\n\n  for (var j = left; j <= right - 1; j++) {\n    if (rects[j].width < pivot) {\n      it++;\n\n      if (it !== j) {\n        // swap(rects[it],rects[j];\n        const rect1 = { ...rects[it]\n        };\n        const rect2 = { ...rects[j]\n        };\n        rects[it] = rect2;\n        rects[j] = rect1;\n        values.push({\n          left: it,\n          right: j,\n          swap: true,\n          changedRange: false\n        });\n      }\n    }\n  }\n\n  if (it + 1 !== right) {\n    const rect1 = { ...rects[it + 1]\n    };\n    const rect2 = { ...rects[right]\n    };\n    rects[it + 1] = rect2;\n    rects[right] = rect1;\n    values.push({\n      left: it + 1,\n      right: right,\n      swap: true,\n      changedRange: false\n    });\n  }\n\n  return it + 1;\n}\n\nfunction quick(rects, left, right) {\n  if (left >= right) return;\n  const partition = getPartition(rects, left, right);\n  quick(rects, left, partition - 1);\n  quick(rects, partition + 1, right);\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/algorithms/quickSortRecursive.js"],"names":["values","quickSortRecursive","rects2","rects","slice","sz","length","quick","getPartition","left","right","push","swap","changedRange","pivot","width","it","j","rect1","rect2","partition"],"mappings":"AAAA,IAAIA,MAAM,GAAG,EAAb;AAEA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAAmC;AACtC,MAAIC,KAAK,GAAGD,MAAM,CAACE,KAAP,EAAZ;AACAJ,EAAAA,MAAM,GAAG,EAAT;AACA,MAAIK,EAAE,GAAGH,MAAM,CAACI,MAAhB,CAHsC,CAItC;;AACAD,EAAAA,EAAE,GAAGA,EAAE,GAAC,CAAR;AACAE,EAAAA,KAAK,CAACJ,KAAD,EAAO,CAAP,EAASE,EAAT,CAAL;AACA,SAAOL,MAAP;AACH;;AAGD,SAASQ,YAAT,CAAsBL,KAAtB,EAA6BM,IAA7B,EAAmCC,KAAnC,EAAyC;AACrCV,EAAAA,MAAM,CAACW,IAAP,CAAY;AACRF,IAAAA,IADQ;AAERC,IAAAA,KAFQ;AAGRE,IAAAA,IAAI,EAAC,KAHG;AAIRC,IAAAA,YAAY,EAAC;AAJL,GAAZ;AAMA,MAAIC,KAAK,GAAGX,KAAK,CAACO,KAAD,CAAL,CAAaK,KAAzB;AACA,MAAIC,EAAE,GAAGP,IAAI,GAAC,CAAd;;AACA,OAAI,IAAIQ,CAAC,GAACR,IAAV,EAAeQ,CAAC,IAAEP,KAAK,GAAC,CAAxB,EAA0BO,CAAC,EAA3B,EAA8B;AAC1B,QAAId,KAAK,CAACc,CAAD,CAAL,CAASF,KAAT,GAAgBD,KAApB,EAA0B;AACtBE,MAAAA,EAAE;;AACF,UAAIA,EAAE,KAAGC,CAAT,EAAY;AACR;AACA,cAAMC,KAAK,GAAG,EAAC,GAAGf,KAAK,CAACa,EAAD;AAAT,SAAd;AACA,cAAMG,KAAK,GAAG,EAAC,GAAGhB,KAAK,CAACc,CAAD;AAAT,SAAd;AACAd,QAAAA,KAAK,CAACa,EAAD,CAAL,GAAYG,KAAZ;AACAhB,QAAAA,KAAK,CAACc,CAAD,CAAL,GAAWC,KAAX;AACAlB,QAAAA,MAAM,CAACW,IAAP,CAAY;AACRF,UAAAA,IAAI,EAACO,EADG;AAERN,UAAAA,KAAK,EAACO,CAFE;AAGRL,UAAAA,IAAI,EAAC,IAHG;AAIRC,UAAAA,YAAY,EAAC;AAJL,SAAZ;AAMH;AACJ;AACJ;;AACD,MAAIG,EAAE,GAAC,CAAH,KAAON,KAAX,EAAkB;AACd,UAAMQ,KAAK,GAAG,EAAC,GAAGf,KAAK,CAACa,EAAE,GAAC,CAAJ;AAAT,KAAd;AACA,UAAMG,KAAK,GAAG,EAAC,GAAGhB,KAAK,CAACO,KAAD;AAAT,KAAd;AACAP,IAAAA,KAAK,CAACa,EAAE,GAAC,CAAJ,CAAL,GAAcG,KAAd;AACAhB,IAAAA,KAAK,CAACO,KAAD,CAAL,GAAeQ,KAAf;AACAlB,IAAAA,MAAM,CAACW,IAAP,CAAY;AACRF,MAAAA,IAAI,EAACO,EAAE,GAAC,CADA;AAERN,MAAAA,KAAK,EAACA,KAFE;AAGRE,MAAAA,IAAI,EAAC,IAHG;AAIRC,MAAAA,YAAY,EAAC;AAJL,KAAZ;AAMH;;AACD,SAAOG,EAAE,GAAC,CAAV;AACH;;AACD,SAAST,KAAT,CAAeJ,KAAf,EAAqBM,IAArB,EAA0BC,KAA1B,EAAgC;AAC5B,MAAID,IAAI,IAAEC,KAAV,EAAkB;AAClB,QAAMU,SAAS,GAAGZ,YAAY,CAACL,KAAD,EAAOM,IAAP,EAAYC,KAAZ,CAA9B;AACAH,EAAAA,KAAK,CAACJ,KAAD,EAAOM,IAAP,EAAYW,SAAS,GAAC,CAAtB,CAAL;AACAb,EAAAA,KAAK,CAACJ,KAAD,EAAOiB,SAAS,GAAC,CAAjB,EAAmBV,KAAnB,CAAL;AACH","sourcesContent":["let values = [];\r\n\r\nexport function quickSortRecursive(rects2){\r\n    let rects = rects2.slice();\r\n    values = [];\r\n    let sz = rects2.length;\r\n    // console.log( \"fdsfsd\",sz );\r\n    sz = sz-1;\r\n    quick(rects,0,sz);\r\n    return values;\r\n}\r\n\r\n\r\nfunction getPartition(rects, left, right){\r\n    values.push({\r\n        left,\r\n        right,\r\n        swap:false,\r\n        changedRange:true,\r\n    })\r\n    let pivot = rects[right].width\r\n    let it = left-1;\r\n    for(var j=left;j<=right-1;j++){\r\n        if( rects[j].width< pivot){\r\n            it++;\r\n            if( it!==j ){\r\n                // swap(rects[it],rects[j];\r\n                const rect1 = {...rects[it]};\r\n                const rect2 = {...rects[j]};\r\n                rects[it] = rect2;\r\n                rects[j] = rect1;\r\n                values.push({\r\n                    left:it,\r\n                    right:j,\r\n                    swap:true,\r\n                    changedRange:false,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    if( it+1!==right ){\r\n        const rect1 = {...rects[it+1]};\r\n        const rect2 = {...rects[right]};\r\n        rects[it+1] = rect2;\r\n        rects[right] = rect1;\r\n        values.push({\r\n            left:it+1,\r\n            right:right,\r\n            swap:true,\r\n            changedRange:false,\r\n        })\r\n    }\r\n    return it+1;\r\n}\r\nfunction quick(rects,left,right){\r\n    if( left>=right ) return ;\r\n    const partition = getPartition(rects,left,right);\r\n    quick(rects,left,partition-1);\r\n    quick(rects,partition+1,right);\r\n}"]},"metadata":{},"sourceType":"module"}