{"ast":null,"code":"let values = [];\nexport default function mergeSort(rects2) {\n  let rects = rects2.slice();\n  values = [];\n  let sz = rects2.length; // console.log( \"fdsfsd\",sz );\n\n  sz = sz - 1;\n  mergeS(rects, 0, sz);\n  return values;\n}\n\nfunction merge(rects, l, m, r) {\n  //  console.log(l,\" \",r);\n  let n1 = m - l + 1;\n  let n2 = r - m;\n  const L = rects.slice(l, m + 1);\n  const R = rects.slice(m + 1, r + 1);\n  let i = 0;\n  let j = 0;\n  let k = l;\n\n  while (i < n1 && j < n2) {\n    if (L[i].width <= R[j].width) {\n      rects[k] = L[i];\n      i++;\n    } else {\n      rects[k] = R[j];\n      j++;\n    }\n\n    k++;\n  }\n\n  while (i < n1) {\n    rects[k] = L[i];\n    i++;\n    k++;\n  }\n\n  while (j < n2) {\n    rects[k] = R[j];\n    j++;\n    k++;\n  }\n}\n\nfunction mergeS(rects, l, r) {\n  if (l >= r) return;\n  let m = l + (r - l) / 2;\n  m = Math.floor(m); // console.log(\"iiiiiiiiiiiiiiiiiiiiiiiii \",m);\n\n  mergeS(rects, l, m);\n  mergeS(rects, m + 1, r);\n  merge(rects, l, m, r);\n  let rectsCopy = rects.slice(l, r + 1);\n  let value = {\n    left: l,\n    right: r,\n    mid: m,\n    val: rectsCopy\n  };\n  values.push(value);\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/algorithms/mergeSort.js"],"names":["values","mergeSort","rects2","rects","slice","sz","length","mergeS","merge","l","m","r","n1","n2","L","R","i","j","k","width","Math","floor","rectsCopy","value","left","right","mid","val","push"],"mappings":"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","sourcesContent":["let values = [];\r\nexport default function mergeSort(rects2){\r\n    let rects = rects2.slice();\r\n    values = [];\r\n    let sz = rects2.length;\r\n   // console.log( \"fdsfsd\",sz );\r\n    sz = sz-1;\r\n    mergeS(rects,0,sz);\r\n    return values;\r\n}\r\n\r\nfunction merge(rects, l, m, r){\r\n  //  console.log(l,\" \",r);\r\n    let n1 = m-l+1;\r\n    let n2 = r-m;\r\n\r\n    const L = rects.slice(l, m+1);\r\n    const R = rects.slice(m+1,r+1);\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = l;\r\n    while(i<n1 && j<n2){\r\n        if( L[i].width <= R[j].width ){\r\n            rects[k] = L[i];\r\n            i++;\r\n        } else{\r\n            rects[k] = R[j];\r\n            j++;\r\n        }\r\n        k++;\r\n    }\r\n    while (i < n1) {\r\n        rects[k] = L[i];\r\n        i++;\r\n        k++;\r\n    }\r\n    while (j < n2) {\r\n        rects[k] = R[j];\r\n        j++;\r\n        k++;\r\n    }\r\n\r\n}\r\n\r\nfunction mergeS(rects,l,r){\r\n\r\n    if( l>=r ) return;\r\n    let m = l+ (r-l)/2;\r\n    m = Math.floor(m);\r\n   // console.log(\"iiiiiiiiiiiiiiiiiiiiiiiii \",m);\r\n    mergeS(rects,l,m);\r\n    mergeS(rects,m+1,r);\r\n    merge(rects,l,m,r);\r\n    let rectsCopy = rects.slice(l,r+1);\r\n    let value = {\r\n        left:l,\r\n        right:r,\r\n        mid:m,\r\n        val:rectsCopy\r\n    }\r\n    values.push(value);\r\n}"]},"metadata":{},"sourceType":"module"}