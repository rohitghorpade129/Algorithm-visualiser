{"ast":null,"code":"let values = [];\nexport function quickSort(rects2) {\n  let rects = rects2.slice();\n  values = [];\n  let sz = rects2.length; // console.log( \"fdsfsd\",sz );\n\n  sz = sz - 1;\n  quick(rects, 0, sz);\n\n  for (var i = 0; i <= sz; i++) {\n    values.push({\n      xx: i,\n      yy: i,\n      changed: true\n    });\n  }\n\n  return values;\n}\n\nfunction getPartition(rects, left, right) {\n  let pivot = rects[right].width;\n  let it = left - 1;\n\n  for (var j = left; j <= right - 1; j++) {\n    if (rects[j].width < pivot) {\n      it++;\n\n      if (it !== j) {\n        // swap(rects[it],rects[j];\n        const rect1 = { ...rects[it]\n        };\n        const rect2 = { ...rects[j]\n        };\n        rects[it] = rect2;\n        rects[j] = rect1;\n        values.push({\n          xx: it,\n          yy: j,\n          changed: true\n        });\n      }\n    }\n  }\n\n  if (it + 1 !== right) {\n    const rect1 = { ...rects[it + 1]\n    };\n    const rect2 = { ...rects[right]\n    };\n    rects[it + 1] = rect2;\n    rects[right] = rect1;\n    values.push({\n      xx: it + 1,\n      yy: right,\n      changed: true\n    });\n  }\n\n  return it + 1;\n}\n\nfunction quick(rects, left, right) {\n  if (left >= right) return;\n  const partition = getPartition(rects, left, right);\n  quick(rects, left, partition - 1);\n  quick(rects, partition + 1, right);\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/algorithms/quickSort.js"],"names":["values","quickSort","rects2","rects","slice","sz","length","quick","i","push","xx","yy","changed","getPartition","left","right","pivot","width","it","j","rect1","rect2","partition"],"mappings":"AAAA,IAAIA,MAAM,GAAG,EAAb;AAEA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA0B;AAC7B,MAAIC,KAAK,GAAGD,MAAM,CAACE,KAAP,EAAZ;AACAJ,EAAAA,MAAM,GAAG,EAAT;AACA,MAAIK,EAAE,GAAGH,MAAM,CAACI,MAAhB,CAH6B,CAI7B;;AACAD,EAAAA,EAAE,GAAGA,EAAE,GAAC,CAAR;AACAE,EAAAA,KAAK,CAACJ,KAAD,EAAO,CAAP,EAASE,EAAT,CAAL;;AACA,OAAI,IAAIG,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAEH,EAAf,EAAkBG,CAAC,EAAnB,EAAsB;AAClBR,IAAAA,MAAM,CAACS,IAAP,CAAY;AACRC,MAAAA,EAAE,EAACF,CADK;AAERG,MAAAA,EAAE,EAACH,CAFK;AAGRI,MAAAA,OAAO,EAAC;AAHA,KAAZ;AAKH;;AACD,SAAOZ,MAAP;AACH;;AAGD,SAASa,YAAT,CAAsBV,KAAtB,EAA6BW,IAA7B,EAAmCC,KAAnC,EAAyC;AACrC,MAAIC,KAAK,GAAGb,KAAK,CAACY,KAAD,CAAL,CAAaE,KAAzB;AACA,MAAIC,EAAE,GAAGJ,IAAI,GAAC,CAAd;;AACA,OAAI,IAAIK,CAAC,GAACL,IAAV,EAAeK,CAAC,IAAEJ,KAAK,GAAC,CAAxB,EAA0BI,CAAC,EAA3B,EAA8B;AAC1B,QAAIhB,KAAK,CAACgB,CAAD,CAAL,CAASF,KAAT,GAAgBD,KAApB,EAA0B;AACtBE,MAAAA,EAAE;;AACF,UAAIA,EAAE,KAAGC,CAAT,EAAY;AACR;AACA,cAAMC,KAAK,GAAG,EAAC,GAAGjB,KAAK,CAACe,EAAD;AAAT,SAAd;AACA,cAAMG,KAAK,GAAG,EAAC,GAAGlB,KAAK,CAACgB,CAAD;AAAT,SAAd;AACAhB,QAAAA,KAAK,CAACe,EAAD,CAAL,GAAYG,KAAZ;AACAlB,QAAAA,KAAK,CAACgB,CAAD,CAAL,GAAWC,KAAX;AACApB,QAAAA,MAAM,CAACS,IAAP,CAAY;AACRC,UAAAA,EAAE,EAACQ,EADK;AAERP,UAAAA,EAAE,EAACQ,CAFK;AAGRP,UAAAA,OAAO,EAAC;AAHA,SAAZ;AAKH;AACJ;AACJ;;AACD,MAAIM,EAAE,GAAC,CAAH,KAAOH,KAAX,EAAkB;AACd,UAAMK,KAAK,GAAG,EAAC,GAAGjB,KAAK,CAACe,EAAE,GAAC,CAAJ;AAAT,KAAd;AACA,UAAMG,KAAK,GAAG,EAAC,GAAGlB,KAAK,CAACY,KAAD;AAAT,KAAd;AACAZ,IAAAA,KAAK,CAACe,EAAE,GAAC,CAAJ,CAAL,GAAcG,KAAd;AACAlB,IAAAA,KAAK,CAACY,KAAD,CAAL,GAAeK,KAAf;AACApB,IAAAA,MAAM,CAACS,IAAP,CAAY;AACRC,MAAAA,EAAE,EAACQ,EAAE,GAAC,CADE;AAERP,MAAAA,EAAE,EAACI,KAFK;AAGRH,MAAAA,OAAO,EAAC;AAHA,KAAZ;AAKH;;AACD,SAAOM,EAAE,GAAC,CAAV;AACH;;AACD,SAASX,KAAT,CAAeJ,KAAf,EAAqBW,IAArB,EAA0BC,KAA1B,EAAgC;AAC5B,MAAID,IAAI,IAAEC,KAAV,EAAkB;AAClB,QAAMO,SAAS,GAAGT,YAAY,CAACV,KAAD,EAAOW,IAAP,EAAYC,KAAZ,CAA9B;AACAR,EAAAA,KAAK,CAACJ,KAAD,EAAOW,IAAP,EAAYQ,SAAS,GAAC,CAAtB,CAAL;AACAf,EAAAA,KAAK,CAACJ,KAAD,EAAOmB,SAAS,GAAC,CAAjB,EAAmBP,KAAnB,CAAL;AACH","sourcesContent":["let values = [];\r\n\r\nexport function quickSort(rects2){\r\n    let rects = rects2.slice();\r\n    values = [];\r\n    let sz = rects2.length;\r\n    // console.log( \"fdsfsd\",sz );\r\n    sz = sz-1;\r\n    quick(rects,0,sz);\r\n    for(var i=0;i<=sz;i++){\r\n        values.push({\r\n            xx:i,\r\n            yy:i,\r\n            changed:true\r\n        })\r\n    }\r\n    return values;\r\n}\r\n\r\n\r\nfunction getPartition(rects, left, right){\r\n    let pivot = rects[right].width\r\n    let it = left-1;\r\n    for(var j=left;j<=right-1;j++){\r\n        if( rects[j].width< pivot){\r\n            it++;\r\n            if( it!==j ){\r\n                // swap(rects[it],rects[j];\r\n                const rect1 = {...rects[it]};\r\n                const rect2 = {...rects[j]};\r\n                rects[it] = rect2;\r\n                rects[j] = rect1;\r\n                values.push({\r\n                    xx:it,\r\n                    yy:j,\r\n                    changed:true\r\n                })\r\n            }\r\n        }\r\n    }\r\n    if( it+1!==right ){\r\n        const rect1 = {...rects[it+1]};\r\n        const rect2 = {...rects[right]};\r\n        rects[it+1] = rect2;\r\n        rects[right] = rect1;\r\n        values.push({\r\n            xx:it+1,\r\n            yy:right,\r\n            changed:true\r\n        })\r\n    }\r\n    return it+1;\r\n}\r\nfunction quick(rects,left,right){\r\n    if( left>=right ) return ;\r\n    const partition = getPartition(rects,left,right);\r\n    quick(rects,left,partition-1);\r\n    quick(rects,partition+1,right);\r\n}"]},"metadata":{},"sourceType":"module"}