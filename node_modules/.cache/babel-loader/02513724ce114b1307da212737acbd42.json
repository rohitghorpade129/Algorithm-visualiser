{"ast":null,"code":"export function getMaze(board,row,col){var pairs=[];var newBoard=board.slice();for(var i=0;i<col;i++){newBoard[0][i].isWall=true;pairs.push({xx:0,yy:i});}for(var _i=0;_i<row;_i++){newBoard[_i][col-1].isWall=true;pairs.push({xx:_i,yy:col-1});}for(var _i2=col-1;_i2>=0;_i2--){newBoard[row-1][_i2].isWall=true;pairs.push({xx:row-1,yy:_i2});}for(var _i3=row-1;_i3>=0;_i3--){newBoard[_i3][0].isWall=true;pairs.push({xx:_i3,yy:0});}decideMaze(pairs,newBoard,1,row-2,1,col-2);//console.log(\"here\");\nreturn pairs;}var val=0;function decideMaze(pairs,board,startRow,endRow,startCol,endCol){//console.log(\"count\");\nval++;if(endRow-startRow<=1&&endCol-startCol<=1){return;}if(endCol-startCol>endRow-startRow){recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol);}else{recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol);}}function recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol){var mid=Math.floor((endCol+startCol)/2);var random=Math.floor(Math.random()*(endRow-startRow+1))+startRow;//console.log( \"row \",random,\" \",startRow,\" \",endRow );\nvar start=startRow;if(!board[startRow-1][mid].isWall){random=start;start++;}var end=endRow;if(!board[endRow+1][mid].isWall){random=end;end--;}for(var i=start;i<=end;i++){if(i!==random){board[i][mid].isWall=true;pairs.push({xx:i,yy:mid});}}decideMaze(pairs,board,startRow,endRow,startCol,mid-1);decideMaze(pairs,board,startRow,endRow,mid+1,endCol);}function recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol){var mid=Math.floor((endRow+startRow)/2);//  console.log(\"mid: \",mid);\nvar random=Math.floor(Math.random()*(endCol-startCol+1))+startCol;var start=startCol;if(!board[mid][startCol-1].isWall){random=start;start++;}var end=endCol;if(!board[mid][endCol+1].isWall){random=end;end--;}for(var i=start;i<=end;i++){if(i!==random){board[mid][i].isWall=true;pairs.push({xx:mid,yy:i});}}decideMaze(pairs,board,startRow,mid-1,startCol,endCol);decideMaze(pairs,board,mid+1,endRow,startCol,endCol);}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/algorithms/recursiveMaze.js"],"names":["getMaze","board","row","col","pairs","newBoard","slice","i","isWall","push","xx","yy","decideMaze","val","startRow","endRow","startCol","endCol","recursiveMazeVertical","recursiveMazeHorizontal","mid","Math","floor","random","start","end"],"mappings":"AAAA,MAAO,SAASA,CAAAA,OAAT,CAAiBC,KAAjB,CAAuBC,GAAvB,CAA2BC,GAA3B,CAA+B,CAClC,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,GAAIC,CAAAA,QAAQ,CAAGJ,KAAK,CAACK,KAAN,EAAf,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAeA,CAAC,CAAEJ,GAAlB,CAAsBI,CAAC,EAAvB,CAA0B,CACtBF,QAAQ,CAAC,CAAD,CAAR,CAAYE,CAAZ,EAAeC,MAAf,CAAwB,IAAxB,CACAJ,KAAK,CAACK,IAAN,CAAW,CACPC,EAAE,CAAC,CADI,CAEPC,EAAE,CAACJ,CAFI,CAAX,EAIH,CACD,IAAK,GAAIA,CAAAA,EAAC,CAAG,CAAb,CAAeA,EAAC,CAAEL,GAAlB,CAAsBK,EAAC,EAAvB,CAA0B,CACtBF,QAAQ,CAACE,EAAD,CAAR,CAAYJ,GAAG,CAAC,CAAhB,EAAmBK,MAAnB,CAA4B,IAA5B,CACAJ,KAAK,CAACK,IAAN,CAAW,CACPC,EAAE,CAACH,EADI,CAEPI,EAAE,CAACR,GAAG,CAAC,CAFA,CAAX,EAIH,CACD,IAAK,GAAII,CAAAA,GAAC,CAAGJ,GAAG,CAAC,CAAjB,CAAmBI,GAAC,EAAE,CAAtB,CAAwBA,GAAC,EAAzB,CAA6B,CACzBF,QAAQ,CAACH,GAAG,CAAC,CAAL,CAAR,CAAgBK,GAAhB,EAAmBC,MAAnB,CAA4B,IAA5B,CACAJ,KAAK,CAACK,IAAN,CAAW,CACPC,EAAE,CAACR,GAAG,CAAC,CADA,CAEPS,EAAE,CAACJ,GAFI,CAAX,EAIH,CACD,IAAI,GAAIA,CAAAA,GAAC,CAAGL,GAAG,CAAC,CAAhB,CAAkBK,GAAC,EAAE,CAArB,CAAuBA,GAAC,EAAxB,CAA2B,CACvBF,QAAQ,CAACE,GAAD,CAAR,CAAY,CAAZ,EAAeC,MAAf,CAAwB,IAAxB,CACAJ,KAAK,CAACK,IAAN,CAAW,CACPC,EAAE,CAACH,GADI,CAEPI,EAAE,CAAC,CAFI,CAAX,EAIH,CACDC,UAAU,CAACR,KAAD,CAAOC,QAAP,CAAgB,CAAhB,CAAkBH,GAAG,CAAC,CAAtB,CAAwB,CAAxB,CAA0BC,GAAG,CAAC,CAA9B,CAAV,CACA;AACA,MAAOC,CAAAA,KAAP,CACH,CACD,GAAIS,CAAAA,GAAG,CAAG,CAAV,CAEA,QAASD,CAAAA,UAAT,CAAoBR,KAApB,CAA0BH,KAA1B,CAAgCa,QAAhC,CAAyCC,MAAzC,CAAgDC,QAAhD,CAAyDC,MAAzD,CAAiE,CAC7D;AACAJ,GAAG,GAEH,GAAME,MAAM,CAACD,QAAR,EAAoB,CAArB,EAA6BG,MAAM,CAAGD,QAAV,EAAsB,CAAtD,CAA0D,CACtD,OACH,CAEA,GAAKC,MAAM,CAAGD,QAAV,CAAuBD,MAAM,CAAGD,QAApC,CAA+C,CAC5CI,qBAAqB,CAACd,KAAD,CAAOH,KAAP,CAAaa,QAAb,CAAsBC,MAAtB,CAA6BC,QAA7B,CAAsCC,MAAtC,CAArB,CACH,CAFA,IAEK,CACFE,uBAAuB,CAACf,KAAD,CAAOH,KAAP,CAAaa,QAAb,CAAsBC,MAAtB,CAA6BC,QAA7B,CAAsCC,MAAtC,CAAvB,CACH,CACJ,CACD,QAASC,CAAAA,qBAAT,CAA+Bd,KAA/B,CAAqCH,KAArC,CAA2Ca,QAA3C,CAAoDC,MAApD,CAA2DC,QAA3D,CAAoEC,MAApE,CAA2E,CACvE,GAAIG,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,MAAM,CAACD,QAAR,EAAkB,CAA7B,CAAV,CACA,GAAIO,CAAAA,MAAM,CAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBR,MAAM,CAACD,QAAP,CAAgB,CAAjC,CAAX,EAAkDA,QAA/D,CACA;AACA,GAAIU,CAAAA,KAAK,CAAGV,QAAZ,CACA,GAAI,CAACb,KAAK,CAACa,QAAQ,CAAC,CAAV,CAAL,CAAkBM,GAAlB,EAAuBZ,MAA5B,CAAoC,CAChCe,MAAM,CAAGC,KAAT,CACAA,KAAK,GACR,CACD,GAAIC,CAAAA,GAAG,CAAGV,MAAV,CACA,GAAI,CAACd,KAAK,CAACc,MAAM,CAAC,CAAR,CAAL,CAAgBK,GAAhB,EAAqBZ,MAA1B,CAAkC,CAC9Be,MAAM,CAAGE,GAAT,CACAA,GAAG,GACN,CACD,IAAI,GAAIlB,CAAAA,CAAC,CAAGiB,KAAZ,CAAkBjB,CAAC,EAAEkB,GAArB,CAAyBlB,CAAC,EAA1B,CAA6B,CACzB,GAAIA,CAAC,GAAGgB,MAAR,CAAgB,CACZtB,KAAK,CAACM,CAAD,CAAL,CAASa,GAAT,EAAcZ,MAAd,CAAuB,IAAvB,CACAJ,KAAK,CAACK,IAAN,CAAW,CACPC,EAAE,CAACH,CADI,CAEPI,EAAE,CAACS,GAFI,CAAX,EAIH,CACJ,CACDR,UAAU,CAACR,KAAD,CAAOH,KAAP,CAAaa,QAAb,CAAsBC,MAAtB,CAA6BC,QAA7B,CAAsCI,GAAG,CAAC,CAA1C,CAAV,CACAR,UAAU,CAACR,KAAD,CAAOH,KAAP,CAAaa,QAAb,CAAsBC,MAAtB,CAA6BK,GAAG,CAAC,CAAjC,CAAmCH,MAAnC,CAAV,CACH,CACD,QAASE,CAAAA,uBAAT,CAAiCf,KAAjC,CAAuCH,KAAvC,CAA6Ca,QAA7C,CAAsDC,MAAtD,CAA6DC,QAA7D,CAAsEC,MAAtE,CAA6E,CACzE,GAAIG,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAW,CAACP,MAAM,CAACD,QAAR,EAAkB,CAA7B,CAAV,CACF;AACE,GAAIS,CAAAA,MAAM,CAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBN,MAAM,CAACD,QAAP,CAAgB,CAAjC,CAAX,EAAkDA,QAA/D,CACA,GAAIQ,CAAAA,KAAK,CAAGR,QAAZ,CACA,GAAI,CAACf,KAAK,CAACmB,GAAD,CAAL,CAAWJ,QAAQ,CAAC,CAApB,EAAuBR,MAA5B,CAAoC,CAChCe,MAAM,CAAGC,KAAT,CACAA,KAAK,GACR,CACD,GAAIC,CAAAA,GAAG,CAAGR,MAAV,CACA,GAAI,CAAChB,KAAK,CAACmB,GAAD,CAAL,CAAWH,MAAM,CAAC,CAAlB,EAAqBT,MAA1B,CAAkC,CAC9Be,MAAM,CAAGE,GAAT,CACAA,GAAG,GACN,CACD,IAAI,GAAIlB,CAAAA,CAAC,CAAGiB,KAAZ,CAAkBjB,CAAC,EAAEkB,GAArB,CAAyBlB,CAAC,EAA1B,CAA6B,CACzB,GAAIA,CAAC,GAAGgB,MAAR,CAAgB,CACZtB,KAAK,CAACmB,GAAD,CAAL,CAAWb,CAAX,EAAcC,MAAd,CAAuB,IAAvB,CACAJ,KAAK,CAACK,IAAN,CAAW,CACPC,EAAE,CAACU,GADI,CAEPT,EAAE,CAACJ,CAFI,CAAX,EAIH,CACJ,CACDK,UAAU,CAACR,KAAD,CAAOH,KAAP,CAAaa,QAAb,CAAsBM,GAAG,CAAC,CAA1B,CAA4BJ,QAA5B,CAAqCC,MAArC,CAAV,CACAL,UAAU,CAACR,KAAD,CAAOH,KAAP,CAAamB,GAAG,CAAC,CAAjB,CAAmBL,MAAnB,CAA0BC,QAA1B,CAAmCC,MAAnC,CAAV,CAEH","sourcesContent":["export function getMaze(board,row,col){\r\n    const pairs = [];\r\n    let newBoard = board.slice();\r\n    for( let i = 0;i <col;i++){\r\n        newBoard[0][i].isWall = true;\r\n        pairs.push({\r\n            xx:0,\r\n            yy:i\r\n        });\r\n    }\r\n    for( let i = 0;i <row;i++){\r\n        newBoard[i][col-1].isWall = true;\r\n        pairs.push({\r\n            xx:i,\r\n            yy:col-1\r\n        });\r\n    }\r\n    for( let i = col-1;i>=0;i-- ){\r\n        newBoard[row-1][i].isWall = true;\r\n        pairs.push({\r\n            xx:row-1,\r\n            yy:i\r\n        });\r\n    }\r\n    for(let i = row-1;i>=0;i--){\r\n        newBoard[i][0].isWall = true;\r\n        pairs.push({\r\n            xx:i,\r\n            yy:0\r\n        });\r\n    }\r\n    decideMaze(pairs,newBoard,1,row-2,1,col-2);\r\n    //console.log(\"here\");\r\n    return pairs;\r\n}\r\nlet val = 0;\r\n\r\nfunction decideMaze(pairs,board,startRow,endRow,startCol,endCol) {\r\n    //console.log(\"count\");\r\n    val++;\r\n\r\n    if( ((endRow-startRow) <=1) && ((endCol - startCol) <=1) ){\r\n        return;\r\n    }\r\n\r\n     if( (endCol - startCol) > (endRow - startRow) ){\r\n        recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol);\r\n    } else{\r\n        recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol);\r\n    }\r\n}\r\nfunction recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol){\r\n    let mid = Math.floor((endCol+startCol)/2);\r\n    let random = Math.floor(Math.random() * (endRow-startRow+1)) + startRow;\r\n    //console.log( \"row \",random,\" \",startRow,\" \",endRow );\r\n    let start = startRow;\r\n    if( !board[startRow-1][mid].isWall ){\r\n        random = start;\r\n        start++;\r\n    }\r\n    let end = endRow;\r\n    if( !board[endRow+1][mid].isWall ){\r\n        random = end;\r\n        end--;\r\n    }\r\n    for(let i = start;i<=end;i++){\r\n        if( i!==random ){\r\n            board[i][mid].isWall = true;\r\n            pairs.push({\r\n                xx:i,\r\n                yy:mid\r\n            });\r\n        }\r\n    }\r\n    decideMaze(pairs,board,startRow,endRow,startCol,mid-1);\r\n    decideMaze(pairs,board,startRow,endRow,mid+1,endCol);\r\n}\r\nfunction recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol){\r\n    let mid = Math.floor((endRow+startRow)/2);\r\n  //  console.log(\"mid: \",mid);\r\n    let random = Math.floor(Math.random() * (endCol-startCol+1)) + startCol;\r\n    let start = startCol;\r\n    if( !board[mid][startCol-1].isWall ){\r\n        random = start;\r\n        start++;\r\n    }\r\n    let end = endCol;\r\n    if( !board[mid][endCol+1].isWall ){\r\n        random = end;\r\n        end--;\r\n    }\r\n    for(let i = start;i<=end;i++){\r\n        if( i!==random ){\r\n            board[mid][i].isWall = true;\r\n            pairs.push({\r\n                xx:mid,\r\n                yy:i\r\n            });\r\n        }\r\n    }\r\n    decideMaze(pairs,board,startRow,mid-1,startCol,endCol);\r\n    decideMaze(pairs,board,mid+1,endRow,startCol,endCol);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}