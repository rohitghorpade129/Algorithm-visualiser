{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\New folder\\\\Algorithm-Visualizer\\\\src\\\\primeComponents\\\\seive.jsx\";\nimport React, { Component } from 'react';\nimport Cells from \"./cells\";\nimport Navbar from \"./navbar\";\nimport DiscreteSlider from \"./slider\";\nimport Menu from \"./menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Seive extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: 100,\n      cells: [],\n      isRunning: false,\n      speed: 500\n    };\n\n    this.changeSpeed = speed => {\n      //console.log(typeof speed);\n      this.setState({\n        speed: 600 - speed * 10\n      });\n    };\n\n    this.handleValueIncease = value => {\n      this.setState({\n        number: value\n      });\n      this.setState({\n        cells: getCells(value),\n        isRunning: false\n      });\n      console.log(value);\n    };\n\n    this.handleRefresh = () => {\n      this.setState({\n        cells: getCells(this.state.number),\n        isRunning: false\n      });\n    };\n\n    this.startSeive = async () => {\n      const speed = this.state.speed;\n      this.setState({\n        isRunning: true\n      });\n      const prime = [];\n\n      for (let i = 0; i <= this.state.number; i++) {\n        prime.push(1);\n      }\n\n      prime[0] = prime[1] = 0;\n      let changedCells = this.state.cells;\n      let prevCheck = -1;\n      let counter = 0;\n\n      for (let i = 2; i <= this.state.number; i++) {\n        if (prime[i] === 1) {\n          //   setTimeout(()=>{\n          changedCells = getNewCellPrimeToggled(changedCells, i - 1);\n          this.setState({\n            cells: changedCells\n          }); //},counter*speed);\n\n          await sleep(this.state.speed);\n          counter++;\n\n          for (let j = i * i; j <= this.state.number; j += i) {\n            //setTimeout(()=>{\n            if (prevCheck != -1) {\n              changedCells = getNewCellVisitingToggled(changedCells, prevCheck);\n            }\n\n            prevCheck = j - 1;\n            changedCells = getNewCellCheckToggled(changedCells, j - 1);\n            changedCells = getNewCellVisitingToggled(changedCells, prevCheck);\n            this.setState({\n              cells: changedCells\n            }); //  },counter*speed);\n\n            await sleep(this.state.speed);\n            counter++;\n            prime[j] = 0;\n          }\n        }\n      } //  setTimeout(()=>{\n\n\n      changedCells = getNewCellVisitingToggled(changedCells, prevCheck);\n      this.setState({\n        cells: changedCells,\n        isRunning: false\n      }); // },counter*speed);\n    };\n  }\n\n  componentDidMount() {\n    const cells = getCells(this.state.number);\n    this.setState({\n      cells\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        onChangeSpeed: this.changeSpeed,\n        onChangeValues: this.handleValueIncease,\n        onVisualize: this.startSeive,\n        onRefresh: this.handleRefresh,\n        isDisabled: this.state.isRunning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Cells, {\n        num: this.state.number,\n        cells: this.state.cells\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst getNewCellPrimeToggled = (cells, pos) => {\n  const newCells = cells.slice();\n  const cell = newCells[pos];\n  const newCell = { ...cell,\n    isPrime: true\n  };\n  newCells[pos] = newCell;\n  return newCells;\n};\n\nconst getNewCellVisitingToggled = (cells, pos) => {\n  const newCells = cells.slice();\n  const cell = newCells[pos];\n  const newCell = { ...cell,\n    isVisiting: !cell.isVisiting\n  };\n  newCells[pos] = newCell;\n  return newCells;\n};\n\nconst getNewCellCheckToggled = (cells, pos) => {\n  const newCells = cells.slice();\n  const cell = newCells[pos];\n  const newCell = { ...cell,\n    isChecking: true\n  };\n  newCells[pos] = newCell;\n  return newCells;\n};\n\nconst getCells = rows => {\n  const cells = [];\n\n  for (let cell = 1; cell <= rows; cell++) {\n    cells.push(createCell(cell));\n  }\n\n  return cells;\n};\n\nconst createCell = val => {\n  return {\n    val,\n    isChecking: false,\n    isVisiting: false,\n    isPrime: false\n  };\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default Seive;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/primeComponents/seive.jsx"],"names":["React","Component","Cells","Navbar","DiscreteSlider","Menu","Seive","constructor","props","state","number","cells","isRunning","speed","changeSpeed","setState","handleValueIncease","value","getCells","console","log","handleRefresh","startSeive","prime","i","push","changedCells","prevCheck","counter","getNewCellPrimeToggled","sleep","j","getNewCellVisitingToggled","getNewCellCheckToggled","componentDidMount","render","pos","newCells","slice","cell","newCell","isPrime","isVisiting","isChecking","rows","createCell","val","ms","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Cells from \"./cells\";\r\nimport Navbar from \"./navbar\";\r\nimport DiscreteSlider from \"./slider\";\r\nimport Menu from \"./menu\";\r\n\r\nclass Seive extends Component {\r\n    state = {\r\n        number: 100,\r\n        cells:[],\r\n        isRunning:false,\r\n        speed:500\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n        const cells = getCells(this.state.number);\r\n        this.setState({cells});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <Menu\r\n                    onChangeSpeed={this.changeSpeed}\r\n                    onChangeValues={this.handleValueIncease}\r\n                    onVisualize = {this.startSeive}\r\n                    onRefresh = {this.handleRefresh}\r\n                    isDisabled = {this.state.isRunning}\r\n                />\r\n                <Cells\r\n                    num={this.state.number}\r\n                    cells={this.state.cells}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeSpeed = (speed) => {\r\n        //console.log(typeof speed);\r\n        this.setState({speed:600-speed*10});\r\n    }\r\n    handleValueIncease = (value) => {\r\n        this.setState({number:value});\r\n        this.setState({cells:getCells(value),isRunning:false});\r\n        console.log(value);\r\n    }\r\n    handleRefresh = () => {\r\n        this.setState({cells:getCells(this.state.number),isRunning:false});\r\n    }\r\n    startSeive = async () => {\r\n        const speed = this.state.speed;\r\n        this.setState({isRunning:true});\r\n        const prime = [];\r\n        for(let i = 0;i<=this.state.number;i++){\r\n            prime.push(1);\r\n        }\r\n        prime[0] = prime[1] = 0;\r\n        let changedCells = this.state.cells;\r\n        let prevCheck = -1;\r\n        let counter = 0;\r\n        for( let i = 2; i<=this.state.number;i++){\r\n            if( prime[i] === 1 ){\r\n             //   setTimeout(()=>{\r\n                    changedCells = getNewCellPrimeToggled(changedCells,i-1);\r\n                    this.setState({cells:changedCells});\r\n                //},counter*speed);\r\n                await sleep(this.state.speed);\r\n                counter++;\r\n                for(let j = i*i;j<=this.state.number;j+=i){\r\n                    //setTimeout(()=>{\r\n                        if( prevCheck!=-1 ){\r\n                            changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\r\n                        }\r\n                        prevCheck = j-1;\r\n                        changedCells = getNewCellCheckToggled(changedCells,j-1);\r\n                        changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\r\n                        this.setState({cells:changedCells});\r\n                  //  },counter*speed);\r\n                    await sleep(this.state.speed);\r\n                    counter++;\r\n                    prime[j] = 0;\r\n                }\r\n            }\r\n        }\r\n      //  setTimeout(()=>{\r\n            changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\r\n            this.setState({cells:changedCells,isRunning:false});\r\n       // },counter*speed);\r\n    }\r\n}\r\n\r\nconst getNewCellPrimeToggled = (cells,pos) =>{\r\n    const newCells = cells.slice();\r\n    const cell = newCells[pos];\r\n    const newCell = {\r\n        ...cell,\r\n        isPrime:true\r\n    }\r\n    newCells[pos] = newCell;\r\n    return newCells;\r\n}\r\n\r\nconst getNewCellVisitingToggled = (cells,pos)=>{\r\n    const newCells = cells.slice();\r\n    const cell = newCells[pos];\r\n    const newCell = {\r\n        ...cell,\r\n        isVisiting:!cell.isVisiting\r\n    }\r\n    newCells[pos] = newCell;\r\n    return newCells;\r\n}\r\n\r\nconst getNewCellCheckToggled = (cells,pos) =>{\r\n    const newCells = cells.slice();\r\n    const cell = newCells[pos];\r\n    const newCell = {\r\n        ...cell,\r\n        isChecking:true\r\n    }\r\n    newCells[pos] = newCell;\r\n    return newCells;\r\n}\r\n\r\nconst getCells = (rows)=>{\r\n    const cells = [];\r\n    for(let cell = 1;cell<=rows;cell++){\r\n        cells.push(createCell(cell))\r\n    }\r\n    return cells;\r\n}\r\nconst createCell = (val)=>{\r\n    return {\r\n        val,\r\n        isChecking:false,\r\n        isVisiting:false,\r\n        isPrime:false\r\n    };\r\n}\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nexport default Seive;"]},"metadata":{},"sourceType":"module"}