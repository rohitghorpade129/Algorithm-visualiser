{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\New folder\\\\Algorithm-Visualizer\\\\src\\\\sortComponents\\\\sort.js\";\nimport React, { Component } from 'react';\nimport Rect from \"./rect\";\nimport Rects from \"./rects\";\nimport { bubbleSort, selectionSort, insertionSort } from \"../algorithms/sortingAlgorithms\";\nimport { quickSort } from \"../algorithms/quickSort\";\nimport Navbar from \"./navbar\";\nimport Menu from \"./menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Sort extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 20,\n      rects: [],\n      rects2: [],\n      doubles: false,\n      speed: 50,\n      isRunning: false,\n      isRunning1: false,\n      isRunning2: false,\n      algo1: 0,\n      algo2: 0\n    };\n\n    this.handleRandomize = () => {\n      const rect = getInitialRects(this.state.count);\n      const rect2 = rect.slice();\n      this.setState({\n        rects: rect,\n        rects2: rect2\n      });\n    };\n\n    this.handleRefresh = () => {\n      const rects = this.state.rects;\n\n      for (let i = 0; i < rects.length; i++) {\n        const rect = { ...rects[i],\n          isSorted: false,\n          isSorting: false\n        };\n        rects[i] = rect;\n      }\n\n      const rects2 = rects.slice();\n      this.setState({\n        rects,\n        rects2\n      });\n    };\n\n    this.handleDouble = val => {\n      this.setState({\n        doubles: val\n      });\n    };\n\n    this.handleCountChange = val => {\n      this.setState({\n        count: val\n      });\n      this.handleRandomize();\n    };\n\n    this.handleAlgoChanged = (pos, val) => {\n      if (pos === 0) {\n        this.setState({\n          algo1: val\n        });\n      } else {\n        this.setState({\n          algo2: val\n        });\n      }\n    };\n\n    this.handleSpeedChanged = val => {\n      const speed = 110 - val;\n      this.setState({\n        speed\n      });\n    };\n\n    this.handleSort = () => {\n      this.setState({\n        isRunning: true\n      });\n      let steps1;\n\n      switch (this.state.algo1) {\n        case 0:\n          steps1 = bubbleSort(this.state.rects);\n          break;\n\n        case 1:\n          steps1 = selectionSort(this.state.rects);\n          break;\n\n        case 2:\n          steps1 = insertionSort(this.state.rects);\n          break;\n\n        case 3:\n          steps1 = quickSort(this.state.rects2);\n          console.log(steps1);\n          break;\n\n        default:\n          steps1 = bubbleSort(this.state.rects);\n          break;\n      }\n\n      let steps2;\n\n      if (this.state.doubles) {\n        switch (this.state.algo2) {\n          case 0:\n            steps2 = bubbleSort(this.state.rects2);\n            break;\n\n          case 1:\n            steps2 = selectionSort(this.state.rects2);\n            break;\n\n          case 2:\n            steps2 = insertionSort(this.state.rects2);\n            break;\n\n          case 3:\n            steps2 = quickSort(this.state.rects2);\n            break;\n\n          default:\n            steps2 = bubbleSort(this.state.rects2);\n            break;\n        }\n      }\n\n      this.handleFirst(steps1);\n      if (this.state.doubles) this.handleSecond(steps2);\n    };\n\n    this.handleFirst = async steps => {\n      // console.log(\"fsdfsdfsdfasdf\");\n      this.setState({\n        isRunning1: true\n      });\n      const {\n        speed\n      } = this.state; // const steps = bubbleSort(this.state.rects);\n      //  console.log(steps.length);\n\n      const prevRect = this.state.rects;\n\n      for (let i = 0; i < steps.length; i++) {\n        //   setTimeout(()=>{\n        if (i !== 0) {\n          prevRect[steps[i - 1].xx] = { ...prevRect[steps[i - 1].xx],\n            isSorting: false\n          };\n          prevRect[steps[i - 1].yy] = { ...prevRect[steps[i - 1].yy],\n            isSorting: false\n          };\n        }\n\n        if (steps[i].xx === steps[i].yy) {\n          prevRect[steps[i].xx] = { ...prevRect[steps[i].xx],\n            isSorted: true,\n            isSorting: false\n          };\n        } else if (steps[i].changed) {\n          const recti = { ...prevRect[steps[i].xx],\n            isSorting: true\n          };\n          const rectj = { ...prevRect[steps[i].yy],\n            isSorting: true\n          };\n          prevRect[steps[i].yy] = recti;\n          prevRect[steps[i].xx] = rectj;\n        } else {\n          prevRect[steps[i].xx] = { ...prevRect[steps[i].xx],\n            isSorting: true\n          };\n          prevRect[steps[i].yy] = { ...prevRect[steps[i].yy],\n            isSorting: true\n          };\n        }\n\n        if (i === steps.length - 1) {\n          this.setState({\n            isRunning1: false\n          });\n\n          if (this.state.isRunning2 === false) {\n            this.setState({\n              isRunning: false\n            });\n          }\n        }\n        /* if( i === (steps.length)-2 ){\r\n             this.setState({isRunning1:false});\r\n             if( this.state.isRunning2 === false ){\r\n                 this.setState({isRunning:false});\r\n             }\r\n             prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorting:false,isSorted:true};\r\n             prevRect[steps[i].yy] = {...prevRect[steps[i].yy],isSorting:false,isSorted:true};\r\n         }*/\n\n\n        this.setState({\n          rects: prevRect\n        });\n        await sleep(this.state.speed); // },i*speed);\n      }\n    };\n\n    this.handleSecond = async steps => {\n      const {\n        speed\n      } = this.state;\n      this.setState({\n        isRunning2: true\n      });\n      const prevRect = this.state.rects2;\n\n      for (let i = 0; i < steps.length; i++) {\n        //   setTimeout(()=>{\n        if (i !== 0) {\n          prevRect[steps[i - 1].xx] = { ...prevRect[steps[i - 1].xx],\n            isSorting: false\n          };\n          prevRect[steps[i - 1].yy] = { ...prevRect[steps[i - 1].yy],\n            isSorting: false\n          };\n        }\n\n        if (steps[i].xx === steps[i].yy) {\n          prevRect[steps[i].xx] = { ...prevRect[steps[i].xx],\n            isSorted: true,\n            isSorting: false\n          };\n        } else if (steps[i].changed) {\n          const recti = { ...prevRect[steps[i].xx],\n            isSorting: true\n          };\n          const rectj = { ...prevRect[steps[i].yy],\n            isSorting: true\n          };\n          prevRect[steps[i].yy] = recti;\n          prevRect[steps[i].xx] = rectj;\n        } else {\n          prevRect[steps[i].xx] = { ...prevRect[steps[i].xx],\n            isSorting: true\n          };\n          prevRect[steps[i].yy] = { ...prevRect[steps[i].yy],\n            isSorting: true\n          };\n        }\n\n        if (i === steps.length - 1) {\n          this.setState({\n            isRunning2: false\n          });\n\n          if (this.state.isRunning1 === false) {\n            this.setState({\n              isRunning: false\n            });\n          }\n        }\n        /* if( i === (steps.length)-2 ){\r\n             prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorting:false,isSorted:true};\r\n             prevRect[steps[i].yy] = {...prevRect[steps[i].yy],isSorting:false,isSorted:true};\r\n             this.setState({isRunning2:false});\r\n             if( this.state.isRunning1 === false ){\r\n                 this.setState({isRunning:false});\r\n             }\r\n         }*/\n\n\n        this.setState({\n          rects2: prevRect\n        });\n        await sleep(this.state.speed); // },i*speed);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const rect = getInitialRects(this.state.count);\n    const rect2 = rect.slice();\n    this.setState({\n      rects: rect,\n      rects2: rect2\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        disable: this.state.isRunning,\n        onDoubleChange: this.handleDouble,\n        onViusalize: this.handleSort,\n        onRandomize: this.handleRandomize,\n        onRefresh: this.handleRefresh,\n        onCountChange: this.handleCountChange,\n        onAlgoChanged: this.handleAlgoChanged,\n        onSpeedChange: this.handleSpeedChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(Rects, {\n          rects: this.state.rects\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), this.state.doubles && /*#__PURE__*/_jsxDEV(\"hr\", {\n          style: {\n            width: \"90%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 41\n        }, this), this.state.doubles && /*#__PURE__*/_jsxDEV(Rects, {\n          rects: this.state.rects2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst getInitialRects = tot => {\n  const rects = [];\n\n  for (let i = 0; i < tot; i++) {\n    rects.push(getRect());\n  }\n\n  return rects;\n};\n\nconst getRect = () => {\n  return {\n    width: Math.floor(Math.random() * 200) + 50,\n    isSorted: false,\n    isSorting: false\n  };\n};\n\nexport default Sort;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/sortComponents/sort.js"],"names":["React","Component","Rect","Rects","bubbleSort","selectionSort","insertionSort","quickSort","Navbar","Menu","Sort","constructor","state","count","rects","rects2","doubles","speed","isRunning","isRunning1","isRunning2","algo1","algo2","handleRandomize","rect","getInitialRects","rect2","slice","setState","handleRefresh","i","length","isSorted","isSorting","handleDouble","val","handleCountChange","handleAlgoChanged","pos","handleSpeedChanged","handleSort","steps1","console","log","steps2","handleFirst","handleSecond","steps","prevRect","xx","yy","changed","recti","rectj","sleep","componentDidMount","render","width","ms","Promise","resolve","setTimeout","tot","push","getRect","Math","floor","random"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Rect from \"./rect\";\r\nimport Rects from \"./rects\";\r\nimport {bubbleSort,selectionSort,insertionSort} from \"../algorithms/sortingAlgorithms\";\r\nimport {quickSort} from \"../algorithms/quickSort\";\r\nimport Navbar from \"./navbar\";\r\nimport Menu from \"./menu\";\r\n\r\nclass Sort extends Component {\r\n  state = {\r\n      count:20,\r\n      rects: [],\r\n      rects2: [],\r\n      doubles:false,\r\n      speed:50,\r\n      isRunning:false,\r\n      isRunning1:false,\r\n      isRunning2:false,\r\n      algo1:0,\r\n      algo2:0\r\n  }\r\n  constructor() {\r\n      super();\r\n  }\r\n  componentDidMount() {\r\n      const rect = getInitialRects(this.state.count);\r\n      const rect2 = rect.slice();\r\n      this.setState({rects:rect,rects2:rect2});\r\n  }\r\n\r\n    render() {\r\n    return (\r\n        <React.Fragment>\r\n            <Navbar/>\r\n            <Menu\r\n                disable={this.state.isRunning}\r\n                onDoubleChange={this.handleDouble}\r\n                onViusalize={this.handleSort}\r\n                onRandomize={this.handleRandomize}\r\n                onRefresh={this.handleRefresh}\r\n                onCountChange={this.handleCountChange}\r\n                onAlgoChanged={this.handleAlgoChanged}\r\n                onSpeedChange={this.handleSpeedChanged}\r\n            />\r\n            <div className=' justify-content-center'>\r\n\r\n                <Rects\r\n                    rects={this.state.rects}\r\n                />\r\n                { this.state.doubles && <hr style={{width:\"90%\"}}/>}\r\n                { this.state.doubles &&\r\n                <Rects\r\n                    rects={this.state.rects2}\r\n                /> }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n  handleRandomize = () => {\r\n      const rect = getInitialRects(this.state.count);\r\n      const rect2 = rect.slice();\r\n      this.setState({rects:rect,rects2:rect2});\r\n  }\r\n  handleRefresh = () =>{\r\n      const rects = this.state.rects;\r\n      for(let i=0;i<rects.length;i++){\r\n          const rect = {...rects[i],isSorted:false, isSorting:false}\r\n          rects[i] = rect;\r\n      }\r\n      const rects2 = rects.slice();\r\n      this.setState({rects,rects2});\r\n  }\r\n\r\n  handleDouble = (val) =>{\r\n      this.setState({doubles:val});\r\n  }\r\n  handleCountChange = (val) => {\r\n      this.setState({count:val});\r\n      this.handleRandomize();\r\n  }\r\n  handleAlgoChanged = (pos,val) =>{\r\n      if( pos === 0 ){\r\n          this.setState({algo1:val});\r\n      } else{\r\n          this.setState({algo2:val});\r\n      }\r\n  }\r\n  handleSpeedChanged = (val) =>{\r\n    const speed = (110-val);\r\n    this.setState({speed});\r\n  }\r\n  handleSort = () =>{\r\n\r\n      this.setState({isRunning:true});\r\n      let steps1;\r\n      switch (this.state.algo1){\r\n          case 0:\r\n              steps1 = bubbleSort(this.state.rects);\r\n              break;\r\n          case 1:\r\n              steps1 = selectionSort(this.state.rects);\r\n              break;\r\n          case 2:\r\n              steps1 = insertionSort(this.state.rects);\r\n              break;\r\n          case 3:\r\n              steps1 = quickSort(this.state.rects2);\r\n              console.log(steps1)\r\n              break;\r\n          default:\r\n              steps1 = bubbleSort(this.state.rects);\r\n              break;\r\n      }\r\n      let steps2;\r\n      if( this.state.doubles ){\r\n\r\n          switch (this.state.algo2){\r\n              case 0:\r\n                  steps2 = bubbleSort(this.state.rects2);\r\n                  break;\r\n              case 1:\r\n                  steps2 = selectionSort(this.state.rects2);\r\n                  break;\r\n              case 2:\r\n                  steps2 = insertionSort(this.state.rects2);\r\n                  break;\r\n              case 3:\r\n                  steps2 = quickSort(this.state.rects2);\r\n                  break;\r\n              default:\r\n                  steps2 = bubbleSort(this.state.rects2);\r\n                  break;\r\n          }\r\n\r\n      }\r\n      this.handleFirst(steps1);\r\n      if( this.state.doubles ) this.handleSecond(steps2);\r\n  }\r\n  handleFirst = async (steps) =>{\r\n     // console.log(\"fsdfsdfsdfasdf\");\r\n      this.setState({isRunning1:true});\r\n      const {speed} = this.state;\r\n     // const steps = bubbleSort(this.state.rects);\r\n    //  console.log(steps.length);\r\n      const prevRect = this.state.rects;\r\n      for(let i = 0;i<steps.length;i++){\r\n       //   setTimeout(()=>{\r\n              if( i!==0 ){\r\n                  prevRect[steps[i-1].xx] = { ...prevRect[steps[i-1].xx],isSorting:false };\r\n                  prevRect[steps[i-1].yy] = { ...prevRect[steps[i-1].yy],isSorting:false };\r\n              }\r\n              if(steps[i].xx===steps[i].yy){\r\n                  prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorted:true,isSorting:false};\r\n              }else if( steps[i].changed ){\r\n                  const recti = {...prevRect[steps[i].xx],isSorting:true};\r\n                  const rectj = {...prevRect[steps[i].yy],isSorting:true};\r\n                  prevRect[steps[i].yy] = recti;\r\n                  prevRect[steps[i].xx] = rectj;\r\n              } else{\r\n                  prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorting:true};\r\n                  prevRect[steps[i].yy] = {...prevRect[steps[i].yy],isSorting:true};\r\n              }\r\n              if(i === steps.length-1){\r\n                  this.setState({isRunning1:false});\r\n                  if( this.state.isRunning2 === false ){\r\n                      this.setState({isRunning:false});\r\n                  }\r\n              }\r\n             /* if( i === (steps.length)-2 ){\r\n                  this.setState({isRunning1:false});\r\n                  if( this.state.isRunning2 === false ){\r\n                      this.setState({isRunning:false});\r\n                  }\r\n                  prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorting:false,isSorted:true};\r\n                  prevRect[steps[i].yy] = {...prevRect[steps[i].yy],isSorting:false,isSorted:true};\r\n              }*/\r\n              this.setState({rects:prevRect});\r\n              await sleep(this.state.speed);\r\n         // },i*speed);\r\n      }\r\n  }\r\n    handleSecond = async (steps) =>{\r\n        const {speed} = this.state;\r\n        this.setState({isRunning2:true});\r\n        const prevRect = this.state.rects2;\r\n        for(let i = 0;i<steps.length;i++){\r\n         //   setTimeout(()=>{\r\n                if( i!==0 ){\r\n                    prevRect[steps[i-1].xx] = { ...prevRect[steps[i-1].xx],isSorting:false };\r\n                    prevRect[steps[i-1].yy] = { ...prevRect[steps[i-1].yy],isSorting:false };\r\n                }\r\n                if(steps[i].xx===steps[i].yy){\r\n                    prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorted:true,isSorting:false};\r\n                }else if( steps[i].changed ){\r\n                    const recti = {...prevRect[steps[i].xx],isSorting:true};\r\n                    const rectj = {...prevRect[steps[i].yy],isSorting:true};\r\n                    prevRect[steps[i].yy] = recti;\r\n                    prevRect[steps[i].xx] = rectj;\r\n                } else{\r\n                    prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorting:true};\r\n                    prevRect[steps[i].yy] = {...prevRect[steps[i].yy],isSorting:true};\r\n                }\r\n                if( i === steps.length-1 ){\r\n                    this.setState({isRunning2:false});\r\n                    if( this.state.isRunning1 === false ){\r\n                        this.setState({isRunning:false});\r\n                    }\r\n                }\r\n               /* if( i === (steps.length)-2 ){\r\n                    prevRect[steps[i].xx] = {...prevRect[steps[i].xx],isSorting:false,isSorted:true};\r\n                    prevRect[steps[i].yy] = {...prevRect[steps[i].yy],isSorting:false,isSorted:true};\r\n                    this.setState({isRunning2:false});\r\n                    if( this.state.isRunning1 === false ){\r\n                        this.setState({isRunning:false});\r\n                    }\r\n                }*/\r\n                this.setState({rects2:prevRect});\r\n                await sleep(this.state.speed);\r\n           // },i*speed);\r\n        }\r\n    }\r\n\r\n\r\n}\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nconst getInitialRects = (tot) => {\r\n    const rects = [];\r\n    for(let i = 0;i<tot;i++){\r\n        rects.push(getRect());\r\n    }\r\n    return rects;\r\n}\r\nconst getRect = () => {\r\n  return {\r\n      width: Math.floor(Math.random() * 200)+50,\r\n      isSorted:false,\r\n      isSorting:false\r\n  }\r\n}\r\nexport default Sort;\r\n"]},"metadata":{},"sourceType":"module"}