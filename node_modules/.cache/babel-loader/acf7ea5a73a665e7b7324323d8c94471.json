{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\New folder\\\\Algorithm-Visualizer\\\\src\\\\queenComponents\\\\queen.jsx\";\nimport React, { Component } from 'react';\nimport Cells from \"./cells\";\nimport Navbar from \"./navbar\";\nimport Menu from \"./menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Queen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [],\n      number: 4,\n      speed: 490,\n      isRunning: false\n    };\n\n    this.handleStop = () => {\n      this.setState({\n        isRunning: false\n      });\n    };\n\n    this.handleSpeedChange = val => {\n      const speed = (100 - val) * 10;\n      this.setState({\n        speed\n      });\n    };\n\n    this.handleQueenChange = number => {\n      this.setState({\n        number\n      });\n      const board = getBoard(this.state.number);\n      this.setState({\n        board\n      });\n    };\n\n    this.handleClear = () => {\n      const board = getBoard(this.state.number);\n      this.setState({\n        board\n      });\n    };\n\n    this.handleTurnOff = () => {\n      const newBoard = turnOffAttack(this.state.board, this.state.number);\n      this.setState({\n        board: newBoard\n      });\n    };\n\n    this.startAlgo = async () => {\n      this.setState({\n        isRunning: true\n      });\n      const newBoard = this.state.board.slice();\n      await this.queensAlgo(newBoard, 0);\n      const newBoard2 = turnOffAttack(this.state.board, this.state.number);\n      this.setState({\n        board: newBoard2,\n        isRunning: false\n      });\n    };\n\n    this.queensAlgo = async (board, col) => {\n      if (col >= this.state.number) {\n        return true;\n      }\n\n      let newBoard = board.slice();\n\n      for (let i = 0; i < this.state.number; i++) {\n        newBoard = turnOffAttack(newBoard, this.state.number);\n        const result = getChecked(newBoard, i, col, this.state.number);\n        newBoard = result[0];\n        this.setState({\n          board: newBoard\n        });\n        await sleep(this.state.speed);\n\n        if (result[1]) {\n          const res = await this.queensAlgo(newBoard, col + 1);\n\n          if (res === true) {\n            return true;\n          }\n\n          newBoard[i][col] = { ...newBoard[i][col],\n            isPresent: true,\n            isCurrent: true\n          };\n          this.setState({\n            board: newBoard\n          });\n          await sleep(this.state.speed);\n          newBoard[i][col] = { ...newBoard[i][col],\n            isPresent: false,\n            isCurrent: false\n          };\n          this.setState({\n            board: newBoard\n          });\n        }\n\n        newBoard[i][col] = { ...newBoard[i][col],\n          isPresent: false,\n          isCurrent: false\n        };\n        newBoard = turnOffAttack(newBoard, this.state.number);\n        this.setState({\n          board: newBoard\n        });\n        await sleep(this.state.speed);\n      }\n\n      return false;\n    };\n  }\n\n  componentDidMount() {\n    const board = getBoard(this.state.number); // board[3][3].isPresent = true;\n\n    this.setState({\n      board\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        onSpeedChange: this.handleSpeedChange,\n        onCountChange: this.handleQueenChange,\n        onViusalize: this.startAlgo,\n        disable: this.state.isRunning,\n        onClear: this.handleClear,\n        onStop: this.handleStop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"Center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Cells, {\n          board: this.state.board\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Queen;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst turnOffAttack = (board, N) => {\n  const newBoard = board.slice();\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: false,\n        isAttacked: false,\n        isCurrent: false\n      };\n    }\n  }\n\n  return newBoard;\n};\n\nconst getChecked = (board, row, col, N) => {\n  const newBoard = board.slice();\n  let pos = true; // same col\n\n  for (let i = 0; i < N; i++) {\n    if (newBoard[row][i].isPresent) {\n      newBoard[row][i] = { ...newBoard[row][i],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[row][i] = { ...newBoard[row][i],\n        isChecked: true\n      };\n    }\n  } // same row\n\n\n  for (let i = 0; i < N; i++) {\n    if (newBoard[i][col].isPresent) {\n      newBoard[i][col] = { ...newBoard[i][col],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][col] = { ...newBoard[i][col],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i < N && j >= 0; i++, j--) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i < N && j < N; i++, j++) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i >= 0 && j < N; i--, j++) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  newBoard[row][col] = { ...newBoard[row][col],\n    isPresent: true,\n    isCurrent: true\n  };\n  return [newBoard, pos];\n};\n\nconst getBoard = N => {\n  const rows = [];\n\n  for (let i = 0; i < N; i++) {\n    const cols = [];\n\n    for (let j = 0; j < N; j++) {\n      cols.push(getCell(i, j));\n    }\n\n    rows.push(cols);\n  }\n\n  return rows;\n};\n\nconst getCell = (row, col) => {\n  return {\n    row,\n    col,\n    isPresent: false,\n    isChecked: false,\n    isAttacked: false,\n    isCurrent: false\n  };\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/queenComponents/queen.jsx"],"names":["React","Component","Cells","Navbar","Menu","Queen","constructor","props","state","board","number","speed","isRunning","handleStop","setState","handleSpeedChange","val","handleQueenChange","getBoard","handleClear","handleTurnOff","newBoard","turnOffAttack","startAlgo","slice","queensAlgo","newBoard2","col","i","result","getChecked","sleep","res","isPresent","isCurrent","componentDidMount","render","textAlign","ms","Promise","resolve","setTimeout","N","j","isChecked","isAttacked","row","pos","rows","cols","push","getCell"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Cells from \"./cells\";\r\nimport Navbar from \"./navbar\";\r\nimport Menu from \"./menu\";\r\n\r\nclass Queen extends Component {\r\n    state={\r\n        board:[],\r\n        number:4,\r\n        speed:490,\r\n        isRunning:false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n        const board = getBoard(this.state.number);\r\n       // board[3][3].isPresent = true;\r\n        this.setState({board});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <Menu\r\n                    onSpeedChange={this.handleSpeedChange}\r\n                    onCountChange={this.handleQueenChange}\r\n                    onViusalize={this.startAlgo}\r\n                    disable={this.state.isRunning}\r\n                    onClear={this.handleClear}\r\n                    onStop={this.handleStop}\r\n                />\r\n                <div style={{textAlign:\"Center\"}}>\r\n                    <Cells\r\n                        board={this.state.board}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleStop =() =>{\r\n        this.setState({isRunning:false});\r\n    }\r\n\r\n    handleSpeedChange = (val)=>{\r\n        const speed = (100-val)*10;\r\n        this.setState({speed});\r\n    }\r\n    handleQueenChange = (number)=>{\r\n        this.setState({number});\r\n        const board = getBoard(this.state.number);\r\n        this.setState({board});\r\n    }\r\n    handleClear = () => {\r\n        const board = getBoard(this.state.number);\r\n        this.setState({board});\r\n    }\r\n    handleTurnOff =  () => {\r\n        const newBoard = turnOffAttack(this.state.board,this.state.number);\r\n        this.setState({board:newBoard});\r\n    }\r\n    startAlgo = async ()=>{\r\n        this.setState({isRunning:true});\r\n        const newBoard = this.state.board.slice();\r\n        await this.queensAlgo(newBoard,0);\r\n        const newBoard2 = turnOffAttack(this.state.board,this.state.number);\r\n        this.setState({board:newBoard2,isRunning:false});\r\n    }\r\n    queensAlgo =  async (board,col) => {\r\n\r\n        if( col>=this.state.number ){\r\n            return true;\r\n        }\r\n\r\n        let newBoard = board.slice();\r\n        for( let i = 0; i < this.state.number;i++ ){\r\n\r\n\r\n            newBoard = turnOffAttack(newBoard,this.state.number);\r\n            const result = getChecked(newBoard,i,col,this.state.number);\r\n            newBoard = result[0];\r\n\r\n            this.setState({board:newBoard});\r\n            await sleep(this.state.speed);\r\n            if( result[1] ){\r\n                const res = await this.queensAlgo(newBoard,col+1)\r\n                if( res === true){\r\n                    return true;\r\n                }\r\n                newBoard[i][col] = {...newBoard[i][col],isPresent:true,isCurrent:true};\r\n                this.setState({board:newBoard});\r\n                await sleep(this.state.speed);\r\n                newBoard[i][col] = {...newBoard[i][col],isPresent:false,isCurrent:false};\r\n                this.setState({board:newBoard});\r\n\r\n            }\r\n            newBoard[i][col] = {...newBoard[i][col],isPresent:false,isCurrent:false};\r\n            newBoard = turnOffAttack(newBoard,this.state.number);\r\n            this.setState({board:newBoard});\r\n            await sleep(this.state.speed);\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nexport default Queen;\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nconst turnOffAttack = (board,N) =>{\r\n    const newBoard = board.slice();\r\n    for( let i = 0;i<N; i++ ){\r\n        for( let j = 0;j<N;j++ ){\r\n            newBoard[i][j] = {...newBoard[i][j],isChecked:false, isAttacked:false,isCurrent:false};\r\n        }\r\n    }\r\n    return newBoard;\r\n}\r\n\r\nconst getChecked = (board,row,col,N) =>{\r\n    const newBoard = board.slice();\r\n    let pos = true;\r\n    // same col\r\n    for( let i = 0;i < N;i++ ){\r\n        if( newBoard[row][i].isPresent ){\r\n            newBoard[row][i] = {...newBoard[row][i],isAttacked:true};\r\n            pos = false;\r\n        } else{\r\n            newBoard[row][i] = {...newBoard[row][i],isChecked:true};\r\n        }\r\n    }\r\n    // same row\r\n    for( let i = 0;i < N;i++ ){\r\n        if( newBoard[i][col].isPresent ){\r\n            newBoard[i][col] = {...newBoard[i][col],isAttacked:true};\r\n            pos = false;\r\n        } else{\r\n            newBoard[i][col] = {...newBoard[i][col],isChecked:true};\r\n        }\r\n    }\r\n    for( let i = row,j = col; i >= 0 && j >= 0; i--, j--){\r\n        if( newBoard[i][j].isPresent ){\r\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\r\n            pos = false;\r\n        } else{\r\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\r\n        }\r\n    }\r\n    for( let i = row,j = col; i <N && j >= 0; i++, j--){\r\n        if( newBoard[i][j].isPresent ){\r\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\r\n            pos = false;\r\n        } else{\r\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\r\n        }\r\n    }\r\n    for( let i = row,j = col; i <N && j < N; i++, j++){\r\n        if( newBoard[i][j].isPresent ){\r\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\r\n            pos = false;\r\n        } else{\r\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\r\n        }\r\n    }\r\n    for( let i = row,j = col; i>=0 && j < N; i--, j++){\r\n        if( newBoard[i][j].isPresent ){\r\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\r\n            pos = false;\r\n        } else{\r\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\r\n        }\r\n    }\r\n\r\n    newBoard[row][col] = {...newBoard[row][col],isPresent:true,isCurrent:true};\r\n\r\n    return [newBoard,pos];\r\n}\r\nconst getBoard = (N) =>{\r\n    const rows = [];\r\n    for( let i = 0;i<N;i++ ){\r\n        const cols = [];\r\n        for(let j =0;j<N;j++){\r\n            cols.push(getCell(i,j));\r\n        }\r\n        rows.push(cols);\r\n    }\r\n    return rows;\r\n}\r\n\r\nconst getCell = (row,col)=>{\r\n    return{\r\n        row,\r\n        col,\r\n        isPresent:false,\r\n        isChecked:false,\r\n        isAttacked:false,\r\n        isCurrent:false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}