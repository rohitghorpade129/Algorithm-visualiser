{"ast":null,"code":"export function bfsdfs(grid, startNode, endNode, algo) {\n  var list = [];\n  const nodesInOrder = [];\n  nodesInOrder.push(startNode);\n  list.push(startNode);\n  startNode.isVisited = true;\n\n  while (!!list.length) {\n    const currentNode = algo === \"bfs\" ? list.shift() : list.pop();\n    nodesInOrder.push(currentNode);\n    if (currentNode === endNode) return nodesInOrder;\n    if (algo === \"dfs\") currentNode.isVisited = true;\n    const nodesToPush = getNeighbours(grid, currentNode);\n\n    for (const node of nodesToPush) {\n      if (algo === \"bfs\") {\n        node.isVisited = true;\n      }\n\n      node.previousNode = currentNode;\n      list.push(node);\n    }\n  }\n\n  return nodesInOrder;\n}\n\nfunction getNeighbours(grid, node) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node; // console.log(node);\n\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited && !neighbor.isWall);\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/New folder/Algorithm-Visualizer/src/algorithms/bfs.jsx"],"names":["bfsdfs","grid","startNode","endNode","algo","list","nodesInOrder","push","isVisited","length","currentNode","shift","pop","nodesToPush","getNeighbours","node","previousNode","neighbors","col","row","filter","neighbor","isWall"],"mappings":"AAAA,OAAO,SAASA,MAAT,CAAgBC,IAAhB,EAAqBC,SAArB,EAA+BC,OAA/B,EAAuCC,IAAvC,EAA4C;AAC/C,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMC,YAAY,GAAG,EAArB;AACAA,EAAAA,YAAY,CAACC,IAAb,CAAkBL,SAAlB;AACAG,EAAAA,IAAI,CAACE,IAAL,CAAUL,SAAV;AACAA,EAAAA,SAAS,CAACM,SAAV,GAAsB,IAAtB;;AACA,SAAM,CAAC,CAACH,IAAI,CAACI,MAAb,EAAoB;AAChB,UAAMC,WAAW,GAAIN,IAAI,KAAK,KAAT,GAAiBC,IAAI,CAACM,KAAL,EAAjB,GAA8BN,IAAI,CAACO,GAAL,EAAnD;AACAN,IAAAA,YAAY,CAACC,IAAb,CAAkBG,WAAlB;AACA,QAAIA,WAAW,KAAKP,OAApB,EAA8B,OAAOG,YAAP;AAC9B,QAAIF,IAAI,KAAK,KAAb,EAAqBM,WAAW,CAACF,SAAZ,GAAwB,IAAxB;AACrB,UAAMK,WAAW,GAAGC,aAAa,CAACb,IAAD,EAAMS,WAAN,CAAjC;;AACA,SAAK,MAAMK,IAAX,IAAmBF,WAAnB,EAAgC;AAC5B,UAAGT,IAAI,KAAK,KAAZ,EAAkB;AACdW,QAAAA,IAAI,CAACP,SAAL,GAAiB,IAAjB;AACH;;AACDO,MAAAA,IAAI,CAACC,YAAL,GAAoBN,WAApB;AACAL,MAAAA,IAAI,CAACE,IAAL,CAAUQ,IAAV;AAEH;AACJ;;AACD,SAAOT,YAAP;AACH;;AAED,SAASQ,aAAT,CAAuBb,IAAvB,EAA4Bc,IAA5B,EAAiC;AAC7B,QAAME,SAAS,GAAG,EAAlB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaJ,IAAnB,CAF6B,CAG9B;;AAEC,MAAIG,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIC,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGlB,IAAI,CAACQ,MAAL,GAAc,CAAxB,EAA2BQ,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAGjB,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,GAAiB,CAA3B,EAA8BQ,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACG,MAAV,CAAiBC,QAAQ,IAAK,CAACA,QAAQ,CAACb,SAAV,IAAuB,CAACa,QAAQ,CAACC,MAA/D,CAAP;AACH","sourcesContent":["export function bfsdfs(grid,startNode,endNode,algo){\r\n    var list = [];\r\n    const nodesInOrder = [];\r\n    nodesInOrder.push(startNode);\r\n    list.push(startNode);\r\n    startNode.isVisited = true;\r\n    while(!!list.length){\r\n        const currentNode = (algo === \"bfs\" ? list.shift():list.pop());\r\n        nodesInOrder.push(currentNode);\r\n        if( currentNode === endNode ) return nodesInOrder;\r\n        if( algo === \"dfs\" ) currentNode.isVisited = true;\r\n        const nodesToPush = getNeighbours(grid,currentNode);\r\n        for( const node of nodesToPush ){\r\n            if(algo === \"bfs\"){\r\n                node.isVisited = true;\r\n            }\r\n            node.previousNode = currentNode;\r\n            list.push(node);\r\n\r\n        }\r\n    }\r\n    return nodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(grid,node){\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n   // console.log(node);\r\n\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => (!neighbor.isVisited && !neighbor.isWall ));\r\n}"]},"metadata":{},"sourceType":"module"}